/***   URL: https://www.hackerrank.com/challenges/ctci-queue-using-two-stacks/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=stacks-queues   ***/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static class MyQueue<T> {
        Stack<T> newestOnTop = new Stack<T>();
        Stack<T> oldestOnTop = new Stack<T>();
        
        public void enqueue(T value) { // Push onto newest stack
            newestOnTop.push(value);
        }

        private void shiftStack()
        {
            // new to old
            if(oldestOnTop.isEmpty())
            {
                while(!newestOnTop.isEmpty())
                {
                    oldestOnTop.push(newestOnTop.pop());
                }
            }
        }

        public T peek() {            
           // shiftstack new to old.
           shiftStack();
           return oldestOnTop.peek();
        }
        
        public T dequeue() 
        {
            // shiftstack new to old
            shiftStack();
            return oldestOnTop.pop();
        }
    }

    
    public static void main(String[] args) {
        MyQueue<Integer> queue = new MyQueue<Integer>();
        
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        
        for (int i = 0; i < n; i++) {
            int operation = scan.nextInt();
            if (operation == 1) { // enqueue
                queue.enqueue(scan.nextInt());
            } else if (operation == 2) { // dequeue
                queue.dequeue();
            } else if (operation == 3) { // print/peek
                System.out.println(queue.peek());
            }
        }
        scan.close();
    }
}
